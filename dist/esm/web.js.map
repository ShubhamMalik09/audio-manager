{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,+CAA+C;AAE/C,2DAA2D;AAE3D,iFAAiF;AACjF,yEAAyE;AACzE,oCAAoC;AACpC,sBAAsB;AACtB,MAAM;AACN,IAAI;AAEJ,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAG5C,MAAM,OAAO,eAAgB,SAAQ,SAAS;IAC5C,KAAK,CAAC,gBAAgB;QACpB,OAAO,CAAC,IAAI,CAAC,0DAA0D,CAAC,CAAC;QACzE,OAAO;YACL,OAAO,EAAE;gBACP,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,WAAW,EAAE,0BAA0B,EAAE,QAAQ,EAAE,0BAA0B,EAAE;aAClG;SACF,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,eAAe;QACnB,OAAO,CAAC,IAAI,CAAC,yDAAyD,CAAC,CAAC;IAC1E,CAAC;IAED,KAAK,CAAC,gBAAgB;QACpB,OAAO,CAAC,IAAI,CAAC,0DAA0D,CAAC,CAAC;IAC3E,CAAC;IAED,KAAK,CAAC,SAAS;QACb,OAAO,CAAC,IAAI,CAAC,mDAAmD,CAAC,CAAC;IACpE,CAAC;IAED,KAAK,CAAC,OAAO;QACX,OAAO,CAAC,IAAI,CAAC,iDAAiD,CAAC,CAAC;IAClE,CAAC;IAED,KAAK,CAAC,yBAAyB,CAAC,CAAuB;QACrD,OAAO,CAAC,IAAI,CAAC,mEAAmE,CAAC,CAAC;IACpF,CAAC;IAED,KAAK,CAAC,cAAc;QAClB,OAAO,CAAC,IAAI,CAAC,wDAAwD,CAAC,CAAC;IACzE,CAAC;IAED,KAAK,CAAC,gBAAgB;QACpB,OAAO,CAAC,IAAI,CAAC,0DAA0D,CAAC,CAAC;IAC3E,CAAC;IAED,KAAK,CAAC,mBAAmB;QACvB,OAAO,CAAC,IAAI,CAAC,6DAA6D,CAAC,CAAC;QAC5E,OAAO;YACL,SAAS,EAAE,KAAK;SACjB,CAAC;IACJ,CAAC;CACF","sourcesContent":["// import { WebPlugin } from '@capacitor/core';\r\n\r\n// import type { AudioManagerPlugin } from './definitions';\r\n\r\n// export class AudioManagerWeb extends WebPlugin implements AudioManagerPlugin {\r\n//   async echo(options: { value: string }): Promise<{ value: string }> {\r\n//     console.log('ECHO', options);\r\n//     return options;\r\n//   }\r\n// }\r\n\r\nimport { WebPlugin } from '@capacitor/core';\r\nimport type { AudioManagerPlugin } from './definitions';\r\n\r\nexport class AudioManagerWeb extends WebPlugin implements AudioManagerPlugin {\r\n  async listAudioOutputs(): Promise<{ devices: { id: number; type: number; productName: string, typeName: string }[] }> {\r\n    console.warn('[AudioManager] listAudioOutputs is not supported on web.');\r\n    return {\r\n      devices: [\r\n        { id: 0, type: 0, productName: 'Default Web Audio Output', typeName: 'Default Web Audio Output' },\r\n      ],\r\n    };\r\n  }\r\n\r\n  async switchToSpeaker(): Promise<void> {\r\n    console.warn('[AudioManager] switchToSpeaker is not supported on web.');\r\n  }\r\n\r\n  async switchToEarpiece(): Promise<void> {\r\n    console.warn('[AudioManager] switchToEarpiece is not supported on web.');\r\n  }\r\n\r\n  async startCall(): Promise<void> {\r\n    console.warn('[AudioManager] startCall is not supported on web.');\r\n  }\r\n\r\n  async endCall(): Promise<void> {\r\n    console.warn('[AudioManager] endCall is not supported on web.');\r\n  }\r\n\r\n  async switchCommunicationDevice(_: { deviceId: number }): Promise<void> {\r\n    console.warn('[AudioManager] switchCommunicationDevice is not supported on web.');\r\n  }\r\n\r\n  async muteMicrophone(): Promise<void> {\r\n    console.warn('[AudioManager] muteMicrophone is not supported on web.');\r\n  }\r\n\r\n  async unmuteMicrophone(): Promise<void> {\r\n    console.warn('[AudioManager] unmuteMicrophone is not supported on web.');\r\n  }\r\n\r\n  async getMicrophoneStatus(): Promise<{ isMicMute: boolean }> {\r\n    console.warn('[AudioManager] getMicrophoneStatus is not supported on web.');\r\n    return {\r\n      isMicMute: false,\r\n    };\r\n  }\r\n}\r\n\r\n"]}